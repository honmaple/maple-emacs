;;; core-autoload.el --- autoload configurations.	-*- lexical-binding: t -*-

;; Copyright (C) 2015-2022 lin.jiang

;; Author: lin.jiang <mail@honmaple.com>
;; URL: https://github.com/honmaple/maple-emacs

;; This file is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;;
;; autoload configurations.
;;

;;; Code:
(defvar generated-autoload-file nil
  "This is neccessary, otherwise raise error.
`Defining as dynamic an already lexical var`.")

(defvar maple-autoload-file
  (expand-file-name "cache/autoloads.el" user-emacs-directory)
  "Autoload file.")

(defconst maple-autoload-directory
  (expand-file-name "core/autoload/" user-emacs-directory)
  "Autoload dir.")

(defun maple-autoload/generate-define (loaddef &rest DIRS)
  "LOADDEF DIRS."
  (let ((generated-autoload-file loaddef))
    (unless (file-exists-p loaddef)
      (with-current-buffer (find-file-noselect generated-autoload-file)
        (insert ";; generated by function: `maple-autoload/generate-define'.\n")
        (save-buffer)))
    (apply 'update-directory-autoloads DIRS)))

(defun maple-autoload/reload ()
  "Generate autoload file from `core/autoload'."
  (interactive)
  (when (file-exists-p maple-autoload-file)
    (delete-file maple-autoload-file t)
    (message "delete old autoload file: %s" maple-autoload-file))

  (maple-autoload/generate-define maple-autoload-file maple-autoload-directory)
  (load maple-autoload-file nil 'nomessage)
  (message "generate autoload file: %s done." maple-autoload-file))

(unless (file-exists-p maple-autoload-file)
  (maple-autoload/reload))
(load maple-autoload-file nil 'nomessage)

(provide 'core-autoload)
;;; core-autoload.el ends here
